
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu May 18 20:59:04 CEST 2023
//----------------------------------------------------

package implementacion.c_ast_ascendente;

import implementacion.asint.TinyASint.Campo;
import implementacion.asint.TinyASint.Campos;
import implementacion.asint.TinyASint.Dec;
import implementacion.asint.TinyASint.Decs;
import implementacion.asint.TinyASint.Exp;
import implementacion.asint.TinyASint.I;
import implementacion.asint.TinyASint.Is;
import implementacion.asint.TinyASint.Null;
import implementacion.asint.TinyASint.PForm;
import implementacion.asint.TinyASint.PForms;
import implementacion.asint.TinyASint.PReal;
import implementacion.asint.TinyASint.PReals;
import implementacion.asint.TinyASint.Prog;
import implementacion.asint.TinyASint.StringLocalizado;
import implementacion.asint.TinyASint.Tipo;
import implementacion.semops.SemOps;
import java_cup.runtime.Symbol;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu May 18 20:59:04 CEST 2023
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\005\007\000\002\005\010\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\010\000\002\007\005\000\002\007\004\000\002\010\005" +
    "\000\002\011\003\000\002\011\002\000\002\012\005\000" +
    "\002\012\003\000\002\013\006\000\002\013\005\000\002" +
    "\014\005\000\002\015\003\000\002\015\002\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\020\004" +
    "\000\002\020\003\000\002\021\006\000\002\022\005\000" +
    "\002\023\003\000\002\023\002\000\002\024\004\000\002" +
    "\024\003\000\002\041\003\000\002\041\002\000\002\025" +
    "\006\000\002\025\010\000\002\025\012\000\002\025\010" +
    "\000\002\025\005\000\002\025\005\000\002\025\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\006\000\002\026\003\000\002\027\005\000\002\027" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\032" +
    "\005\000\002\032\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\033\004\000\002\033\003\000" +
    "\002\040\003\000\002\040\003\000\002\034\006\000\002" +
    "\034\004\000\002\034\005\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\012\040\010\047\ufffe\061\004\062\012\001" +
    "\002\000\004\063\244\001\002\000\004\047\070\001\002" +
    "\000\004\002\241\001\002\000\012\040\ufffc\047\ufffc\061" +
    "\ufffc\062\ufffc\001\002\000\004\063\047\001\002\000\012" +
    "\040\010\047\uffff\061\004\062\012\001\002\000\004\063" +
    "\013\001\002\000\004\030\014\001\002\000\022\026\021" +
    "\031\015\032\026\033\017\034\024\051\023\052\022\063" +
    "\025\001\002\000\010\021\ufff8\022\ufff8\027\ufff8\001\002" +
    "\000\004\022\045\001\002\000\010\021\ufff5\022\ufff5\027" +
    "\ufff5\001\002\000\010\021\ufff3\022\ufff3\027\ufff3\001\002" +
    "\000\014\031\015\032\026\033\017\034\024\063\025\001" +
    "\002\000\004\023\037\001\002\000\004\063\027\001\002" +
    "\000\010\021\ufff6\022\ufff6\027\ufff6\001\002\000\010\021" +
    "\ufff4\022\ufff4\027\ufff4\001\002\000\010\021\ufff7\022\ufff7" +
    "\027\ufff7\001\002\000\004\030\034\001\002\000\006\050" +
    "\033\063\027\001\002\000\006\050\uffe1\063\uffe1\001\002" +
    "\000\006\050\uffe2\063\uffe2\001\002\000\010\021\ufff1\022" +
    "\ufff1\027\ufff1\001\002\000\022\026\021\031\015\032\026" +
    "\033\017\034\024\051\023\052\022\063\025\001\002\000" +
    "\004\022\036\001\002\000\006\050\uffe0\063\uffe0\001\002" +
    "\000\004\064\040\001\002\000\004\024\041\001\002\000" +
    "\004\053\042\001\002\000\014\031\015\032\026\033\017" +
    "\034\024\063\025\001\002\000\010\021\ufff2\022\ufff2\027" +
    "\ufff2\001\002\000\010\021\ufff0\022\ufff0\027\ufff0\001\002" +
    "\000\012\040\ufffa\047\ufffa\061\ufffa\062\ufffa\001\002\000" +
    "\012\040\ufffd\047\ufffd\061\ufffd\062\ufffd\001\002\000\004" +
    "\020\051\001\002\000\012\040\010\047\ufffe\061\004\062" +
    "\012\001\002\000\010\021\uffed\061\052\063\053\001\002" +
    "\000\004\063\064\001\002\000\004\030\062\001\002\000" +
    "\006\021\uffee\027\060\001\002\000\004\021\057\001\002" +
    "\000\006\021\uffeb\027\uffeb\001\002\000\012\040\uffef\047" +
    "\uffef\061\uffef\062\uffef\001\002\000\006\061\052\063\053" +
    "\001\002\000\006\021\uffec\027\uffec\001\002\000\022\026" +
    "\021\031\015\032\026\033\017\034\024\051\023\052\022" +
    "\063\025\001\002\000\006\021\uffe9\027\uffe9\001\002\000" +
    "\004\030\065\001\002\000\022\026\021\031\015\032\026" +
    "\033\017\034\024\051\023\052\022\063\025\001\002\000" +
    "\006\021\uffea\027\uffea\001\002\000\004\047\070\001\002" +
    "\000\050\005\074\020\130\037\100\041\102\044\076\046" +
    "\114\050\uffdd\054\123\055\124\056\073\057\105\060\126" +
    "\063\103\064\107\065\075\066\106\067\101\070\115\071" +
    "\125\001\002\000\004\022\072\001\002\000\012\040\ufff9" +
    "\047\ufff9\061\ufff9\062\ufff9\001\002\000\026\005\074\020" +
    "\130\037\100\063\103\064\107\065\075\066\106\067\101" +
    "\070\115\071\125\001\002\000\026\005\uffb7\020\uffb7\037" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\001\002\000\062\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\035\uffb0\036\uffb0\042\uffb0" +
    "\045\uffb0\001\002\000\026\005\074\020\130\037\100\063" +
    "\103\064\107\065\075\066\106\067\101\070\115\071\125" +
    "\001\002\000\050\005\074\020\130\037\100\041\102\044" +
    "\076\046\114\050\uffde\054\123\055\124\056\073\057\105" +
    "\060\126\063\103\064\107\065\075\066\106\067\101\070" +
    "\115\071\125\001\002\000\026\005\uffb6\020\uffb6\037\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071" +
    "\uffb6\001\002\000\062\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\035\uffae\036\uffae\042\uffae\045" +
    "\uffae\001\002\000\026\005\074\020\130\037\100\063\103" +
    "\064\107\065\075\066\106\067\101\070\115\071\125\001" +
    "\002\000\062\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\035\uffac\036\uffac\042\uffac\045\uffac\001" +
    "\002\000\052\005\uffdb\020\uffdb\037\uffdb\041\uffdb\043\uffdb" +
    "\044\uffdb\046\uffdb\050\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\001\002\000\026\005\074\020\130\037" +
    "\100\063\103\064\107\065\075\066\106\067\101\070\115" +
    "\071\125\001\002\000\062\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\035\uffaf\036\uffaf\042\uffaf" +
    "\045\uffaf\001\002\000\062\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\035\uffb1\036\uffb1\042\uffb1" +
    "\045\uffb1\001\002\000\062\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\035\uffb2\036\uffb2\042\uffb2" +
    "\045\uffb2\001\002\000\006\016\201\020\202\001\002\000" +
    "\062\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\175\024\uffb8\025\173\026\174" +
    "\027\uffb8\035\uffb8\036\uffb8\042\uffb8\045\uffb8\001\002\000" +
    "\054\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\024\uffbd\027\uffbd\035\uffbd\036\uffbd" +
    "\042\uffbd\045\uffbd\001\002\000\012\040\010\047\ufffe\061" +
    "\004\062\012\001\002\000\062\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\035\uffad\036\uffad\042" +
    "\uffad\045\uffad\001\002\000\054\004\uffbf\005\uffbf\006\160" +
    "\007\161\010\156\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\027\uffbf\035\157\036\162\042\uffbf\045\uffbf\001\002\000" +
    "\026\005\074\020\130\037\100\063\103\064\107\065\075" +
    "\066\106\067\101\070\115\071\125\001\002\000\042\004" +
    "\153\005\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\027" +
    "\uffc2\042\uffc2\045\uffc2\001\002\000\040\005\145\011\146" +
    "\012\147\013\144\014\150\015\143\016\uffcb\017\142\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\027\uffcb\042\uffcb\045\uffcb" +
    "\001\002\000\020\016\uffcd\020\uffcd\021\uffcd\022\uffcd\027" +
    "\uffcd\042\uffcd\045\uffcd\001\002\000\026\005\074\020\130" +
    "\037\100\063\103\064\107\065\075\066\106\067\101\070" +
    "\115\071\125\001\002\000\026\005\074\020\130\037\100" +
    "\063\103\064\107\065\075\066\106\067\101\070\115\071" +
    "\125\001\002\000\062\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\035\uffab\036\uffab\042\uffab\045" +
    "\uffab\001\002\000\004\022\134\001\002\000\004\050\133" +
    "\001\002\000\026\005\074\020\130\037\100\063\103\064" +
    "\107\065\075\066\106\067\101\070\115\071\125\001\002" +
    "\000\004\021\132\001\002\000\062\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\035\uffaa\036\uffaa" +
    "\042\uffaa\045\uffaa\001\002\000\056\005\uffdf\020\uffdf\022" +
    "\uffdf\025\uffdf\037\uffdf\041\uffdf\043\uffdf\044\uffdf\046\uffdf" +
    "\050\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\001\002\000\052\005\uffd2\020\uffd2\037\uffd2\041\uffd2\043" +
    "\uffd2\044\uffd2\046\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\001\002\000\004\022\136\001\002" +
    "\000\052\005\uffd0\020\uffd0\037\uffd0\041\uffd0\043\uffd0\044" +
    "\uffd0\046\uffd0\050\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\071\uffd0\001\002\000\004\022\140\001\002\000\052" +
    "\005\uffd1\020\uffd1\037\uffd1\041\uffd1\043\uffd1\044\uffd1\046" +
    "\uffd1\050\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\001\002\000\026\005\074\020\130\037\100\063\103" +
    "\064\107\065\075\066\106\067\101\070\115\071\125\001" +
    "\002\000\026\005\uffc5\020\uffc5\037\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000" +
    "\026\005\uffc6\020\uffc6\037\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\001\002\000\026\005" +
    "\uffc8\020\uffc8\037\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\071\uffc8\001\002\000\026\005\074\020" +
    "\130\037\100\063\103\064\107\065\075\066\106\067\101" +
    "\070\115\071\125\001\002\000\026\005\uffca\020\uffca\037" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\001\002\000\026\005\uffc9\020\uffc9\037\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\001\002\000\026\005\uffc7\020\uffc7\037\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002" +
    "\000\040\005\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3" +
    "\027\uffc3\042\uffc3\045\uffc3\001\002\000\024\005\145\016" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\027\uffcc\042\uffcc" +
    "\045\uffcc\001\002\000\026\005\074\020\130\037\100\063" +
    "\103\064\107\065\075\066\106\067\101\070\115\071\125" +
    "\001\002\000\040\005\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\027\uffc4\042\uffc4\045\uffc4\001\002\000\054\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\024\uffb9\027\uffb9\035\uffb9\036\uffb9\042\uffb9" +
    "\045\uffb9\001\002\000\026\005\uffba\020\uffba\037\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba" +
    "\001\002\000\026\005\074\020\130\037\100\063\103\064" +
    "\107\065\075\066\106\067\101\070\115\071\125\001\002" +
    "\000\026\005\uffbb\020\uffbb\037\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\001\002\000\026" +
    "\005\uffbc\020\uffbc\037\uffbc\063\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\001\002\000\026\005\074" +
    "\020\130\037\100\063\103\064\107\065\075\066\106\067" +
    "\101\070\115\071\125\001\002\000\026\005\074\020\130" +
    "\037\100\063\103\064\107\065\075\066\106\067\101\070" +
    "\115\071\125\001\002\000\054\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe" +
    "\027\uffbe\035\uffbe\036\uffbe\042\uffbe\045\uffbe\001\002\000" +
    "\042\004\uffc0\005\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024" +
    "\uffc0\027\uffc0\042\uffc0\045\uffc0\001\002\000\050\004\uffc1" +
    "\005\uffc1\006\160\007\161\010\156\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\024\uffc1\027\uffc1\042\uffc1\045\uffc1\001\002\000" +
    "\004\047\070\001\002\000\054\005\uffd9\020\uffd9\022\171" +
    "\037\uffd9\041\uffd9\043\uffd9\044\uffd9\046\uffd9\050\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000" +
    "\052\005\uffda\020\uffda\037\uffda\041\uffda\043\uffda\044\uffda" +
    "\046\uffda\050\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\001\002\000\052\005\uffce\020\uffce\037\uffce\041" +
    "\uffce\043\uffce\044\uffce\046\uffce\050\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\067\uffce\070\uffce\071\uffce\001\002\000\004\063\200" +
    "\001\002\000\062\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\035\uffb4\036\uffb4\042\uffb4\045\uffb4" +
    "\001\002\000\026\005\074\020\130\037\100\063\103\064" +
    "\107\065\075\066\106\067\101\070\115\071\125\001\002" +
    "\000\004\024\177\001\002\000\062\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\035\uffb5\036\uffb5" +
    "\042\uffb5\045\uffb5\001\002\000\062\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\035\uffb3\036\uffb3" +
    "\042\uffb3\045\uffb3\001\002\000\026\005\074\020\130\037" +
    "\100\063\103\064\107\065\075\066\106\067\101\070\115" +
    "\071\125\001\002\000\030\005\074\020\130\021\uffe6\037" +
    "\100\063\103\064\107\065\075\066\106\067\101\070\115" +
    "\071\125\001\002\000\004\022\204\001\002\000\052\005" +
    "\uffcf\020\uffcf\037\uffcf\041\uffcf\043\uffcf\044\uffcf\046\uffcf" +
    "\050\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\001\002\000\006\021\uffe4\027\uffe4\001\002\000\004\021" +
    "\213\001\002\000\006\021\uffe3\027\uffe3\001\002\000\006" +
    "\021\uffe7\027\211\001\002\000\026\005\074\020\130\037" +
    "\100\063\103\064\107\065\075\066\106\067\101\070\115" +
    "\071\125\001\002\000\006\021\uffe5\027\uffe5\001\002\000" +
    "\004\022\uffe8\001\002\000\004\022\215\001\002\000\052" +
    "\005\uffd8\020\uffd8\037\uffd8\041\uffd8\043\uffd8\044\uffd8\046" +
    "\uffd8\050\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\001\002\000\004\022\217\001\002\000\052\005\uffd3" +
    "\020\uffd3\037\uffd3\041\uffd3\043\uffd3\044\uffd3\046\uffd3\050" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\001" +
    "\002\000\004\042\221\001\002\000\046\005\074\020\130" +
    "\037\100\041\102\044\076\046\114\054\123\055\124\056" +
    "\073\057\105\060\126\063\103\064\107\065\075\066\106" +
    "\067\101\070\115\071\125\001\002\000\052\005\074\020" +
    "\130\037\100\041\102\043\223\044\076\046\114\050\224" +
    "\054\123\055\124\056\073\057\105\060\126\063\103\064" +
    "\107\065\075\066\106\067\101\070\115\071\125\001\002" +
    "\000\046\005\074\020\130\037\100\041\102\044\076\046" +
    "\114\054\123\055\124\056\073\057\105\060\126\063\103" +
    "\064\107\065\075\066\106\067\101\070\115\071\125\001" +
    "\002\000\054\005\uffd9\020\uffd9\022\171\037\uffd9\041\uffd9" +
    "\043\uffd9\044\uffd9\046\uffd9\050\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\001\002\000\052\005\uffdc\020" +
    "\uffdc\037\uffdc\041\uffdc\043\uffdc\044\uffdc\046\uffdc\050\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\001\002" +
    "\000\052\005\uffd7\020\uffd7\037\uffd7\041\uffd7\043\uffd7\044" +
    "\uffd7\046\uffd7\050\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\001\002\000\050\005\074\020\130\037\100" +
    "\041\102\044\076\046\114\050\230\054\123\055\124\056" +
    "\073\057\105\060\126\063\103\064\107\065\075\066\106" +
    "\067\101\070\115\071\125\001\002\000\054\005\uffd9\020" +
    "\uffd9\022\171\037\uffd9\041\uffd9\043\uffd9\044\uffd9\046\uffd9" +
    "\050\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\001\002\000\052\005\uffd6\020\uffd6\037\uffd6\041\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\050\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\070\uffd6\071\uffd6\001\002\000\004\045\233\001\002" +
    "\000\046\005\074\020\130\037\100\041\102\044\076\046" +
    "\114\054\123\055\124\056\073\057\105\060\126\063\103" +
    "\064\107\065\075\066\106\067\101\070\115\071\125\001" +
    "\002\000\050\005\074\020\130\037\100\041\102\044\076" +
    "\046\114\050\235\054\123\055\124\056\073\057\105\060" +
    "\126\063\103\064\107\065\075\066\106\067\101\070\115" +
    "\071\125\001\002\000\054\005\uffd9\020\uffd9\022\171\037" +
    "\uffd9\041\uffd9\043\uffd9\044\uffd9\046\uffd9\050\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\052" +
    "\005\uffd5\020\uffd5\037\uffd5\041\uffd5\043\uffd5\044\uffd5\046" +
    "\uffd5\050\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071" +
    "\uffd5\001\002\000\004\022\240\001\002\000\052\005\uffd4" +
    "\020\uffd4\037\uffd4\041\uffd4\043\uffd4\044\uffd4\046\uffd4\050" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\001" +
    "\002\000\004\002\000\001\002\000\004\025\243\001\002" +
    "\000\004\002\001\001\002\000\004\030\245\001\002\000" +
    "\022\026\021\031\015\032\026\033\017\034\024\051\023" +
    "\052\022\063\025\001\002\000\004\022\247\001\002\000" +
    "\012\040\ufffb\047\ufffb\061\ufffb\062\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\012\002\005\003\004\004\010\005\006\001" +
    "\001\000\002\001\001\000\004\022\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\017\007\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\043" +
    "\001\001\000\002\001\001\000\006\020\027\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\017" +
    "\007\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\047\001\001" +
    "\000\010\003\066\004\010\005\006\001\001\000\010\011" +
    "\054\012\053\013\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\060\001\001\000\002" +
    "\001\001\000\006\006\017\007\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\017\007\065\001\001" +
    "\000\002\001\001\000\004\022\070\001\001\000\032\023" +
    "\126\024\076\025\103\026\110\027\121\030\120\031\117" +
    "\032\115\033\112\034\111\035\107\040\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\026\236\027\121" +
    "\030\120\031\117\032\115\033\112\034\111\035\107\040" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\026\231\027\121\030\120\031\117\032\115\033\112\034" +
    "\111\035\107\040\116\001\001\000\026\025\224\026\110" +
    "\027\121\030\120\031\117\032\115\033\112\034\111\035" +
    "\107\040\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\217\027\121\030\120\031\117\032\115\033" +
    "\112\034\111\035\107\040\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\026\215\027\121\030\120\031" +
    "\117\032\115\033\112\034\111\035\107\040\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\166\004\010\005\006\001\001\000\002\001" +
    "\001\000\004\037\162\001\001\000\012\033\154\034\111" +
    "\035\107\040\116\001\001\000\002\001\001\000\004\036" +
    "\140\001\001\000\002\001\001\000\024\026\136\027\121" +
    "\030\120\031\117\032\115\033\112\034\111\035\107\040" +
    "\116\001\001\000\024\026\134\027\121\030\120\031\117" +
    "\032\115\033\112\034\111\035\107\040\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\027\130\030\120\031\117\032\115\033\112\034\111\035" +
    "\107\040\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\030\151\031\117\032\115\033\112\034\111\035\107\040" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\031\150\032\115\033\112\034\111\035" +
    "\107\040\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\153\032\115\033\112\034\111\035\107\040\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\032\165\033\112\034\111\035\107\040\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\164\032\115\033\112\034\111\035\107\040\116\001\001" +
    "\000\012\033\163\034\111\035\107\040\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\162\001\001" +
    "\000\004\022\167\001\001\000\004\041\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\027\175\030\120\031\117\032\115\033" +
    "\112\034\111\035\107\040\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\026\213\027" +
    "\121\030\120\031\117\032\115\033\112\034\111\035\107" +
    "\040\116\001\001\000\032\015\205\016\207\017\204\026" +
    "\206\027\121\030\120\031\117\032\115\033\112\034\111" +
    "\035\107\040\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\211\026\206\027\121\030" +
    "\120\031\117\032\115\033\112\034\111\035\107\040\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\024\221\025\103\026\110\027" +
    "\121\030\120\031\117\032\115\033\112\034\111\035\107" +
    "\040\116\001\001\000\026\025\224\026\110\027\121\030" +
    "\120\031\117\032\115\033\112\034\111\035\107\040\116" +
    "\001\001\000\030\024\226\025\103\026\110\027\121\030" +
    "\120\031\117\032\115\033\112\034\111\035\107\040\116" +
    "\001\001\000\004\041\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\025\224\026\110\027\121\030\120" +
    "\031\117\032\115\033\112\034\111\035\107\040\116\001" +
    "\001\000\004\041\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\024\233\025\103\026\110\027\121\030" +
    "\120\031\117\032\115\033\112\034\111\035\107\040\116" +
    "\001\001\000\026\025\224\026\110\027\121\030\120\031" +
    "\117\032\115\033\112\034\111\035\107\040\116\001\001" +
    "\000\004\041\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\017\007" +
    "\245\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= Decs Insts PUNTO 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.prog(decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decs ::= LDecs 
            {
              Decs RESULT =null;
		Decs ldecs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = ldecs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.decs_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= LDecs Dec 
            {
              Decs RESULT =null;
		Decs ldecs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(ldecs, dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= Dec 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR ID DOSPUNTOS Tipo PUNTOCOMA 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.decVar(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE ID DOSPUNTOS Tipo PUNTOCOMA 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.decTipo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC ID PForms Decs Insts PUNTOCOMA 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		PForms pforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.decProc(id, pforms, decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TipoBase ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoInt(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TipoBase ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoReal(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TipoBase ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoString(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoBase ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoBool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoBase ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoRef(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= TipoBase 
            {
              Tipo RESULT =null;
		Tipo tipobase = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = tipobase; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= ARRAY CORCH_AP LITENT CORCH_CIER OF TipoBase 
            {
              Tipo RESULT =null;
		StringLocalizado litent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipobase = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoArray(litent, tipobase); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= RECORD Campos END 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipoRecord(campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= CIRCUN TipoBase 
            {
              Tipo RESULT =null;
		Tipo tipobase = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoPointer(tipobase); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PForms ::= PAR_AP LPFormsPar PAR_CIER 
            {
              PForms RESULT =null;
		PForms lpformspar = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = lpformspar; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PForms",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LPFormsPar ::= LPForms 
            {
              PForms RESULT =null;
		PForms lpforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = lpforms; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPFormsPar",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LPFormsPar ::= 
            {
              PForms RESULT =null;
		 RESULT = sem.pForm_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPFormsPar",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LPForms ::= LPForms COMA PForm 
            {
              PForms RESULT =null;
		PForms lpforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PForm pform = (PForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pForm_muchas(lpforms, pform); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPForms",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LPForms ::= PForm 
            {
              PForms RESULT =null;
		PForm pform = (PForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pForm_una(pform); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPForms",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PForm ::= VAR ID DOSPUNTOS Tipo 
            {
              PForm RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pFormRef(id, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PForm",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PForm ::= ID DOSPUNTOS Tipo 
            {
              PForm RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pForm(id, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PForm",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PReals ::= PAR_AP LPRealsPar PAR_CIER 
            {
              PReals RESULT =null;
		PReals lprealspar = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = lprealspar; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PReals",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LPRealsPar ::= LPReals 
            {
              PReals RESULT =null;
		PReals lpreals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = lpreals; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPRealsPar",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LPRealsPar ::= 
            {
              PReals RESULT =null;
		 RESULT = sem.pReal_ninguno(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPRealsPar",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LPReals ::= LPReals COMA PReal 
            {
              PReals RESULT =null;
		PReals lpreals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PReal preal = (PReal)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pReal_muchos(lpreals, preal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPReals",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LPReals ::= PReal 
            {
              PReals RESULT =null;
		PReal preal = (PReal)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pReal_uno(preal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPReals",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PReal ::= Exp 
            {
              PReal RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pReal(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PReal",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Campos ::= Campos Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_muchos(campos, campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_uno(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Campo ::= ID DOSPUNTOS Tipo PUNTOCOMA 
            {
              Campo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Insts ::= BEGIN LInstsAux END 
            {
              Is RESULT =null;
		Is linstsaux = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = linstsaux; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Insts",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LInstsAux ::= LInsts 
            {
              Is RESULT =null;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = linsts; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInstsAux",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LInstsAux ::= 
            {
              Is RESULT =null;
		 RESULT = sem.is_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInstsAux",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LInsts ::= LInsts Inst 
            {
              Is RESULT =null;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		I inst = (I)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.is_muchas(linsts, inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsts",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LInsts ::= Inst 
            {
              Is RESULT =null;
		I inst = (I)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.is_una(inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsts",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PuntoComaONada ::= PUNTOCOMA 
            {
              Null RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PuntoComaONada",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PuntoComaONada ::= 
            {
              Null RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PuntoComaONada",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inst ::= Exp ASIG Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.asig(exp0, exp1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Inst ::= IF Exp THEN LInsts END PuntoComaONada 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.if_then(exp, linsts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Inst ::= IF Exp THEN LInsts ELSE LInsts END PuntoComaONada 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		Is linsts0 = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Is linsts1 = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.if_then_else(exp, linsts0, linsts1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Inst ::= WHILE Exp DO LInsts END PuntoComaONada 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.while1(exp, linsts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Inst ::= READ Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.read(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Inst ::= WRITE Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.write(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Inst ::= NL PUNTOCOMA 
            {
              I RESULT =null;
		 RESULT = sem.nl(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Inst ::= NEW Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.new1(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Inst ::= DELETE Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.delete(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Inst ::= Exp PReals PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PReals preals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.call(exp, preals); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Inst ::= SEQ Decs Insts PuntoComaONada 
            {
              I RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.iComp(decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp ::= Exp0 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp0 ::= Exp1 Op0 Exp1 
            {
              Exp RESULT =null;
		Exp exp10 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op0 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp11 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.expb(op0, exp10, exp11); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp0",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp0 ::= Exp1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp1; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp0",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Op0 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Op0 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Op0 ::= MENORIG 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Op0 ::= MAYORIG 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Op0 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Op0 ::= DIST 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp1 ::= Exp2 MAS Exp2 
            {
              Exp RESULT =null;
		Exp exp20 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp21 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.suma(exp20, exp21); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp1 ::= Exp1 MENOS Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.resta(exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp1 ::= Exp2 
            {
              Exp RESULT =null;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp2; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp2 ::= Exp3 AND Exp3 
            {
              Exp RESULT =null;
		Exp exp30 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp31 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.and(exp30, exp31); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= Exp3 OR Exp2 
            {
              Exp RESULT =null;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.or(exp3, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 
            {
              Exp RESULT =null;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp3; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp3 ::= Exp3 Op3 Exp4 
            {
              Exp RESULT =null;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.expb(op3, exp3,exp4); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp3",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp3 ::= Exp4 
            {
              Exp RESULT =null;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp4; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp3",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Op3 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op3 ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op3 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp4 ::= Op4 Exp4 
            {
              Exp RESULT =null;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.expu(op4, exp4); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp4",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= Exp5 
            {
              Exp RESULT =null;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp5; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp4",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Op4 ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op4",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Op4 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op4",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp5 ::= Exp5 CORCH_AP Exp0 CORCH_CIER 
            {
              Exp RESULT =null;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.indx(exp5, exp0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp5 ::= Exp5 CIRCUN 
            {
              Exp RESULT =null;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.dref(exp5); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp5 ::= Exp5 PUNTO ID 
            {
              Exp RESULT =null;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.acc(exp5, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp5 ::= Exp6 
            {
              Exp RESULT =null;
		Exp exp6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp6; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp6 ::= LITENT 
            {
              Exp RESULT =null;
		StringLocalizado litent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litInt(litent); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp6 ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado litreal = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litReal(litreal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp6 ::= LITSTR 
            {
              Exp RESULT =null;
		StringLocalizado litstr = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litStr(litstr); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp6 ::= TRUE 
            {
              Exp RESULT =null;
		StringLocalizado true1 = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.true1(true1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp6 ::= FALSE 
            {
              Exp RESULT =null;
		StringLocalizado false1 = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.false1(false1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp6 ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp6 ::= NULL 
            {
              Exp RESULT =null;
		StringLocalizado null1 = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.null1(null1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp6 ::= PAR_AP Exp0 PAR_CIER 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = exp0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

