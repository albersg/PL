/* Generated By:JavaCC: Do not edit this line. ConstructorASTConstants.java */
package implementacion.c_ast_descendente;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstructorASTConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int dpos = 2;
  /** RegularExpression Id. */
  int dig = 3;
  /** RegularExpression Id. */
  int pdec = 4;
  /** RegularExpression Id. */
  int pexp = 5;
  /** RegularExpression Id. */
  int signo = 6;
  /** RegularExpression Id. */
  int Int = 9;
  /** RegularExpression Id. */
  int Real = 10;
  /** RegularExpression Id. */
  int Bool = 11;
  /** RegularExpression Id. */
  int String = 12;
  /** RegularExpression Id. */
  int And = 13;
  /** RegularExpression Id. */
  int Or = 14;
  /** RegularExpression Id. */
  int Not = 15;
  /** RegularExpression Id. */
  int Null = 16;
  /** RegularExpression Id. */
  int True = 17;
  /** RegularExpression Id. */
  int False = 18;
  /** RegularExpression Id. */
  int Proc = 19;
  /** RegularExpression Id. */
  int If = 20;
  /** RegularExpression Id. */
  int Then = 21;
  /** RegularExpression Id. */
  int Else = 22;
  /** RegularExpression Id. */
  int While = 23;
  /** RegularExpression Id. */
  int Do = 24;
  /** RegularExpression Id. */
  int Seq = 25;
  /** RegularExpression Id. */
  int Begin = 26;
  /** RegularExpression Id. */
  int End = 27;
  /** RegularExpression Id. */
  int Record = 28;
  /** RegularExpression Id. */
  int Array = 29;
  /** RegularExpression Id. */
  int Of = 30;
  /** RegularExpression Id. */
  int New = 31;
  /** RegularExpression Id. */
  int Delete = 32;
  /** RegularExpression Id. */
  int Read = 33;
  /** RegularExpression Id. */
  int Write = 34;
  /** RegularExpression Id. */
  int Nl = 35;
  /** RegularExpression Id. */
  int Var = 36;
  /** RegularExpression Id. */
  int Type = 37;
  /** RegularExpression Id. */
  int Id = 38;
  /** RegularExpression Id. */
  int Litent = 39;
  /** RegularExpression Id. */
  int Litreal = 40;
  /** RegularExpression Id. */
  int Litstr = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<dpos>",
    "<dig>",
    "<pdec>",
    "<pexp>",
    "<signo>",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"int\"",
    "\"real\"",
    "\"bool\"",
    "\"string\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"proc\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"seq\"",
    "\"begin\"",
    "\"end\"",
    "\"record\"",
    "\"array\"",
    "\"of\"",
    "\"new\"",
    "\"delete\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"var\"",
    "\"type\"",
    "<Id>",
    "<Litent>",
    "<Litreal>",
    "<Litstr>",
    "\".\"",
    "\":\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"^\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"%\"",
  };

}
