
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 23 18:43:13 CEST 2023
//----------------------------------------------------

package implementacion.c_ast_ascendente;

import java_cup.runtime.*;
import implementacion.semops.SemOps;
import implementacion.asint.TinyASint.*;
import implementacion.c_ast_ascendente.MemOp;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 23 18:43:13 CEST 2023
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\005\007\000\002\005\012\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\010\000\002\007\005\000\002\007\004\000\002\010\005" +
    "\000\002\011\003\000\002\011\002\000\002\012\005\000" +
    "\002\012\003\000\002\013\006\000\002\013\005\000\002" +
    "\014\005\000\002\015\003\000\002\015\002\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\002\000\002\024\004\000\002" +
    "\024\003\000\002\025\006\000\002\025\007\000\002\025" +
    "\010\000\002\025\011\000\002\025\012\000\002\025\007" +
    "\000\002\025\010\000\002\025\005\000\002\025\005\000" +
    "\002\025\004\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\006\000\002\025\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\032\005\000\002\032\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\033\004\000\002\033\003\000\002\040\003\000\002" +
    "\040\003\000\002\034\004\000\002\034\003\000\002\041" +
    "\005\000\002\041\004\000\002\041\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\012\043\010\052\ufffe\064\004\065\012\001" +
    "\002\000\004\066\247\001\002\000\004\052\072\001\002" +
    "\000\004\002\245\001\002\000\012\043\ufffc\052\ufffc\064" +
    "\ufffc\065\ufffc\001\002\000\004\066\047\001\002\000\012" +
    "\043\010\052\uffff\064\004\065\012\001\002\000\004\066" +
    "\013\001\002\000\004\030\014\001\002\000\022\026\021" +
    "\031\015\032\026\033\017\034\024\054\023\055\022\066" +
    "\025\001\002\000\012\021\ufff8\022\ufff8\027\ufff8\053\ufff8" +
    "\001\002\000\004\022\045\001\002\000\012\021\ufff5\022" +
    "\ufff5\027\ufff5\053\ufff5\001\002\000\012\021\ufff4\022\ufff4" +
    "\027\ufff4\053\ufff4\001\002\000\012\031\015\032\026\033" +
    "\017\034\024\001\002\000\004\023\037\001\002\000\004" +
    "\066\027\001\002\000\012\021\ufff6\022\ufff6\027\ufff6\053" +
    "\ufff6\001\002\000\012\021\ufff3\022\ufff3\027\ufff3\053\ufff3" +
    "\001\002\000\012\021\ufff7\022\ufff7\027\ufff7\053\ufff7\001" +
    "\002\000\004\030\035\001\002\000\006\022\033\053\032" +
    "\001\002\000\006\022\uffe1\053\uffe1\001\002\000\012\021" +
    "\ufff1\022\ufff1\027\ufff1\053\ufff1\001\002\000\004\066\027" +
    "\001\002\000\006\022\uffe2\053\uffe2\001\002\000\022\026" +
    "\021\031\015\032\026\033\017\034\024\054\023\055\022" +
    "\066\025\001\002\000\006\022\uffe0\053\uffe0\001\002\000" +
    "\004\067\040\001\002\000\004\024\041\001\002\000\004" +
    "\056\042\001\002\000\012\031\015\032\026\033\017\034" +
    "\024\001\002\000\012\021\ufff2\022\ufff2\027\ufff2\053\ufff2" +
    "\001\002\000\012\021\ufff0\022\ufff0\027\ufff0\053\ufff0\001" +
    "\002\000\012\043\ufffa\052\ufffa\064\ufffa\065\ufffa\001\002" +
    "\000\012\043\ufffd\052\ufffd\064\ufffd\065\ufffd\001\002\000" +
    "\004\020\050\001\002\000\004\020\052\001\002\000\004" +
    "\021\070\001\002\000\010\021\uffed\064\053\066\054\001" +
    "\002\000\004\066\065\001\002\000\004\030\063\001\002" +
    "\000\006\021\uffee\027\061\001\002\000\004\021\060\001" +
    "\002\000\006\021\uffeb\027\uffeb\001\002\000\004\021\uffef" +
    "\001\002\000\006\064\053\066\054\001\002\000\006\021" +
    "\uffec\027\uffec\001\002\000\022\026\021\031\015\032\026" +
    "\033\017\034\024\054\023\055\022\066\025\001\002\000" +
    "\006\021\uffe9\027\uffe9\001\002\000\004\030\066\001\002" +
    "\000\022\026\021\031\015\032\026\033\017\034\024\054" +
    "\023\055\022\066\025\001\002\000\006\021\uffea\027\uffea" +
    "\001\002\000\012\043\010\052\ufffe\064\004\065\012\001" +
    "\002\000\004\052\072\001\002\000\050\005\075\020\131" +
    "\037\102\040\127\041\103\042\120\044\104\047\100\051" +
    "\115\053\uffdd\057\125\060\126\061\076\062\106\063\130" +
    "\066\107\067\113\070\077\071\110\001\002\000\004\022" +
    "\074\001\002\000\012\043\ufff9\052\ufff9\064\ufff9\065\ufff9" +
    "\001\002\000\026\005\uffb5\020\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\001\002" +
    "\000\026\005\075\020\131\037\102\040\127\041\103\042" +
    "\120\066\107\067\113\070\077\071\110\001\002\000\062" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\035\uffad\036\uffad\045\uffad\050\uffad\001\002\000\026" +
    "\005\075\020\131\037\102\040\127\041\103\042\120\066" +
    "\107\067\113\070\077\071\110\001\002\000\050\005\075" +
    "\020\131\037\102\040\127\041\103\042\120\044\104\047" +
    "\100\051\115\053\uffde\057\125\060\126\061\076\062\106" +
    "\063\130\066\107\067\113\070\077\071\110\001\002\000" +
    "\026\005\uffb4\020\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\001\002\000\062\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\035\uffab\036\uffab\045\uffab\050\uffab\001\002\000\026\005" +
    "\075\020\131\037\102\040\127\041\103\042\120\066\107" +
    "\067\113\070\077\071\110\001\002\000\052\005\uffdb\020" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\053\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\001\002" +
    "\000\026\005\075\020\131\037\102\040\127\041\103\042" +
    "\120\066\107\067\113\070\077\071\110\001\002\000\062" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\035\uffa9\036\uffa9\045\uffa9\050\uffa9\001\002\000\062" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\035\uffac\036\uffac\045\uffac\050\uffac\001\002\000\062" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\035\uffb2\036\uffb2\045\uffb2\050\uffb2\001\002\000\006" +
    "\016\205\020\206\001\002\000\062\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\035\uffae\036\uffae" +
    "\045\uffae\050\uffae\001\002\000\062\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\176\024\uffb6\025\174\026\175\027\uffb6\035\uffb6\036\uffb6" +
    "\045\uffb6\050\uffb6\001\002\000\012\043\010\052\ufffe\064" +
    "\004\065\012\001\002\000\054\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb" +
    "\027\uffbb\035\uffbb\036\uffbb\045\uffbb\050\uffbb\001\002\000" +
    "\054\004\uffbd\005\uffbd\006\162\007\163\010\160\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\024\uffbd\027\uffbd\035\161\036\164" +
    "\045\uffbd\050\uffbd\001\002\000\062\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\035\uffaa\036\uffaa" +
    "\045\uffaa\050\uffaa\001\002\000\026\005\075\020\131\037" +
    "\102\040\127\041\103\042\120\066\107\067\113\070\077" +
    "\071\110\001\002\000\042\004\155\005\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\024\uffc0\027\uffc0\045\uffc0\050\uffc0\001" +
    "\002\000\040\005\147\011\150\012\151\013\146\014\152" +
    "\015\145\016\uffc9\017\144\020\uffc9\021\uffc9\022\uffc9\024" +
    "\uffc9\027\uffc9\045\uffc9\050\uffc9\001\002\000\022\016\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\024\uffcb\027\uffcb\045\uffcb\050" +
    "\uffcb\001\002\000\026\005\075\020\131\037\102\040\127" +
    "\041\103\042\120\066\107\067\113\070\077\071\110\001" +
    "\002\000\026\005\075\020\131\037\102\040\127\041\103" +
    "\042\120\066\107\067\113\070\077\071\110\001\002\000" +
    "\062\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\035\uffa8\036\uffa8\045\uffa8\050\uffa8\001\002\000" +
    "\004\022\136\001\002\000\026\005\075\020\131\037\102" +
    "\040\127\041\103\042\120\066\107\067\113\070\077\071" +
    "\110\001\002\000\004\053\133\001\002\000\056\002\uffdf" +
    "\005\uffdf\020\uffdf\022\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\044\uffdf\046\uffdf\047\uffdf\051\uffdf\053\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\001\002\000\004\021\135\001\002\000\062" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\035\uffa7\036\uffa7\045\uffa7\050\uffa7\001\002\000\052" +
    "\005\uffd1\020\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\046\uffd1\047\uffd1\051\uffd1\053\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\066\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\001\002\000\004\022\140\001\002\000\052\005\uffcf" +
    "\020\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\053\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\001" +
    "\002\000\004\022\142\001\002\000\052\005\uffd0\020\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\046\uffd0\047" +
    "\uffd0\051\uffd0\053\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000" +
    "\026\005\075\020\131\037\102\040\127\041\103\042\120" +
    "\066\107\067\113\070\077\071\110\001\002\000\026\005" +
    "\uffc3\020\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\001\002\000\026\005\uffc4\020" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\001\002\000\026\005\uffc6\020\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\001\002\000\026\005\075\020\131\037\102\040" +
    "\127\041\103\042\120\066\107\067\113\070\077\071\110" +
    "\001\002\000\026\005\uffc8\020\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\001\002" +
    "\000\026\005\uffc7\020\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000\026" +
    "\005\uffc5\020\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000\040\005\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\027\uffc1\045\uffc1" +
    "\050\uffc1\001\002\000\024\005\147\016\uffca\020\uffca\021" +
    "\uffca\022\uffca\024\uffca\027\uffca\045\uffca\050\uffca\001\002" +
    "\000\026\005\075\020\131\037\102\040\127\041\103\042" +
    "\120\066\107\067\113\070\077\071\110\001\002\000\040" +
    "\005\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\027\uffc2" +
    "\045\uffc2\050\uffc2\001\002\000\054\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024" +
    "\uffb7\027\uffb7\035\uffb7\036\uffb7\045\uffb7\050\uffb7\001\002" +
    "\000\026\005\uffb8\020\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000\026" +
    "\005\075\020\131\037\102\040\127\041\103\042\120\066" +
    "\107\067\113\070\077\071\110\001\002\000\026\005\uffb9" +
    "\020\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\001\002\000\026\005\uffba\020\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\066\uffba\067\uffba\070" +
    "\uffba\071\uffba\001\002\000\026\005\075\020\131\037\102" +
    "\040\127\041\103\042\120\066\107\067\113\070\077\071" +
    "\110\001\002\000\026\005\075\020\131\037\102\040\127" +
    "\041\103\042\120\066\107\067\113\070\077\071\110\001" +
    "\002\000\054\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\027\uffbc\035\uffbc" +
    "\036\uffbc\045\uffbc\050\uffbc\001\002\000\042\004\uffbe\005" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\027\uffbe\045" +
    "\uffbe\050\uffbe\001\002\000\050\004\uffbf\005\uffbf\006\162" +
    "\007\163\010\160\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\027\uffbf\045\uffbf\050\uffbf\001\002\000\004\052\072\001" +
    "\002\000\054\005\uffcc\020\uffcc\022\173\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\044\uffcc\046\uffcc\047\uffcc\051\uffcc\053" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\001\002\000\052\005\uffcd\020" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\046\uffcd" +
    "\047\uffcd\051\uffcd\053\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\001\002" +
    "\000\004\066\204\001\002\000\004\025\202\001\002\000" +
    "\026\005\075\020\131\037\102\040\127\041\103\042\120" +
    "\066\107\067\113\070\077\071\110\001\002\000\062\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\035\uffb3\036\uffb3\045\uffb3\050\uffb3\001\002\000\004\024" +
    "\201\001\002\000\062\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\035\uffb1\036\uffb1\045\uffb1\050" +
    "\uffb1\001\002\000\004\066\203\001\002\000\062\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\035" +
    "\uffaf\036\uffaf\045\uffaf\050\uffaf\001\002\000\062\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\035" +
    "\uffb0\036\uffb0\045\uffb0\050\uffb0\001\002\000\026\005\075" +
    "\020\131\037\102\040\127\041\103\042\120\066\107\067" +
    "\113\070\077\071\110\001\002\000\030\005\075\020\131" +
    "\021\uffe6\037\102\040\127\041\103\042\120\066\107\067" +
    "\113\070\077\071\110\001\002\000\004\022\210\001\002" +
    "\000\052\005\uffce\020\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\044\uffce\046\uffce\047\uffce\051\uffce\053\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\066\uffce\067\uffce\070" +
    "\uffce\071\uffce\001\002\000\006\021\uffe4\027\uffe4\001\002" +
    "\000\004\021\217\001\002\000\006\021\uffe3\027\uffe3\001" +
    "\002\000\006\021\uffe7\027\215\001\002\000\026\005\075" +
    "\020\131\037\102\040\127\041\103\042\120\066\107\067" +
    "\113\070\077\071\110\001\002\000\006\021\uffe5\027\uffe5" +
    "\001\002\000\004\022\uffe8\001\002\000\004\022\221\001" +
    "\002\000\052\005\uffda\020\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\044\uffda\046\uffda\047\uffda\051\uffda\053\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\063\uffda\066\uffda\067\uffda" +
    "\070\uffda\071\uffda\001\002\000\004\022\223\001\002\000" +
    "\052\005\uffd2\020\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\044\uffd2\046\uffd2\047\uffd2\051\uffd2\053\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\001\002\000\004\045\225\001\002\000\046\005" +
    "\075\020\131\037\102\040\127\041\103\042\120\044\104" +
    "\047\100\051\115\057\125\060\126\061\076\062\106\063" +
    "\130\066\107\067\113\070\077\071\110\001\002\000\052" +
    "\005\075\020\131\037\102\040\127\041\103\042\120\044" +
    "\104\046\227\047\100\051\115\053\230\057\125\060\126" +
    "\061\076\062\106\063\130\066\107\067\113\070\077\071" +
    "\110\001\002\000\046\005\075\020\131\037\102\040\127" +
    "\041\103\042\120\044\104\047\100\051\115\057\125\060" +
    "\126\061\076\062\106\063\130\066\107\067\113\070\077" +
    "\071\110\001\002\000\054\005\uffd9\020\uffd9\022\232\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\053\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\052" +
    "\005\uffdc\020\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044" +
    "\uffdc\046\uffdc\047\uffdc\051\uffdc\053\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\001\002\000\052\005\uffd8\020\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\044\uffd8\046\uffd8\047\uffd8\051\uffd8\053" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\001\002\000\050\005\075\020" +
    "\131\037\102\040\127\041\103\042\120\044\104\047\100" +
    "\051\115\053\234\057\125\060\126\061\076\062\106\063" +
    "\130\066\107\067\113\070\077\071\110\001\002\000\054" +
    "\005\uffd7\020\uffd7\022\235\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\044\uffd7\046\uffd7\047\uffd7\051\uffd7\053\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\001\002\000\052\005\uffd6\020\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\044\uffd6\046\uffd6\047\uffd6\051" +
    "\uffd6\053\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\001\002\000\004\050" +
    "\237\001\002\000\046\005\075\020\131\037\102\040\127" +
    "\041\103\042\120\044\104\047\100\051\115\057\125\060" +
    "\126\061\076\062\106\063\130\066\107\067\113\070\077" +
    "\071\110\001\002\000\050\005\075\020\131\037\102\040" +
    "\127\041\103\042\120\044\104\047\100\051\115\053\241" +
    "\057\125\060\126\061\076\062\106\063\130\066\107\067" +
    "\113\070\077\071\110\001\002\000\054\005\uffd5\020\uffd5" +
    "\022\242\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\053\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\001" +
    "\002\000\052\005\uffd4\020\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\044\uffd4\046\uffd4\047\uffd4\051\uffd4\053\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\066\uffd4\067\uffd4" +
    "\070\uffd4\071\uffd4\001\002\000\004\022\244\001\002\000" +
    "\052\005\uffd3\020\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\044\uffd3\046\uffd3\047\uffd3\051\uffd3\053\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\066\uffd3\067\uffd3\070\uffd3" +
    "\071\uffd3\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002\000\004\030\250\001\002\000\022\026\021" +
    "\031\015\032\026\033\017\034\024\054\023\055\022\066" +
    "\025\001\002\000\004\022\252\001\002\000\012\043\ufffb" +
    "\052\ufffb\064\ufffb\065\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\012\002\005\003\004\004\010\005\006\001" +
    "\001\000\002\001\001\000\004\022\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\017\007\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\043" +
    "\001\001\000\002\001\001\000\006\020\027\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\033\001\001\000\002\001\001" +
    "\000\006\006\017\007\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\050\001\001\000\002\001\001\000\010\011\055\012" +
    "\054\013\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\061\001\001\000\002\001\001" +
    "\000\006\006\017\007\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\017\007\066\001\001\000\002" +
    "\001\001\000\010\003\070\004\010\005\006\001\001\000" +
    "\004\022\072\001\001\000\032\023\131\024\100\025\104" +
    "\026\111\027\123\030\122\031\121\032\116\033\115\034" +
    "\113\035\110\040\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\242\027\123\030" +
    "\122\031\121\032\116\033\115\034\113\035\110\040\120" +
    "\001\001\000\002\001\001\000\024\026\235\027\123\030" +
    "\122\031\121\032\116\033\115\034\113\035\110\040\120" +
    "\001\001\000\026\025\230\026\111\027\123\030\122\031" +
    "\121\032\116\033\115\034\113\035\110\040\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\026\223\027" +
    "\123\030\122\031\121\032\116\033\115\034\113\035\110" +
    "\040\120\001\001\000\002\001\001\000\024\026\221\027" +
    "\123\030\122\031\121\032\116\033\115\034\113\035\110" +
    "\040\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\206\001\001\000\002\001\001" +
    "\000\004\041\176\001\001\000\010\003\170\004\010\005" +
    "\006\001\001\000\002\001\001\000\004\037\164\001\001" +
    "\000\002\001\001\000\012\033\156\034\113\035\110\040" +
    "\120\001\001\000\002\001\001\000\004\036\142\001\001" +
    "\000\002\001\001\000\024\026\140\027\123\030\122\031" +
    "\121\032\116\033\115\034\113\035\110\040\120\001\001" +
    "\000\024\026\136\027\123\030\122\031\121\032\116\033" +
    "\115\034\113\035\110\040\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\027\133\030\122\031\121\032" +
    "\116\033\115\034\113\035\110\040\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\030\153\031" +
    "\121\032\116\033\115\034\113\035\110\040\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\152\032\116\033\115\034\113\035\110\040\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\155" +
    "\032\116\033\115\034\113\035\110\040\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\032\167\033\115\034\113\035\110\040\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\166\032\116" +
    "\033\115\034\113\035\110\040\120\001\001\000\012\033" +
    "\165\034\113\035\110\040\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\164\001\001\000\004\022" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\177\027\123\030" +
    "\122\031\121\032\116\033\115\034\113\035\110\040\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\217\027\123\030\122\031\121\032\116\033" +
    "\115\034\113\035\110\040\120\001\001\000\032\015\211" +
    "\016\213\017\210\026\212\027\123\030\122\031\121\032" +
    "\116\033\115\034\113\035\110\040\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\017\215" +
    "\026\212\027\123\030\122\031\121\032\116\033\115\034" +
    "\113\035\110\040\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\024\225" +
    "\025\104\026\111\027\123\030\122\031\121\032\116\033" +
    "\115\034\113\035\110\040\120\001\001\000\026\025\230" +
    "\026\111\027\123\030\122\031\121\032\116\033\115\034" +
    "\113\035\110\040\120\001\001\000\030\024\232\025\104" +
    "\026\111\027\123\030\122\031\121\032\116\033\115\034" +
    "\113\035\110\040\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\025\230\026\111\027" +
    "\123\030\122\031\121\032\116\033\115\034\113\035\110" +
    "\040\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\024\237\025\104\026\111\027\123" +
    "\030\122\031\121\032\116\033\115\034\113\035\110\040" +
    "\120\001\001\000\026\025\230\026\111\027\123\030\122" +
    "\031\121\032\116\033\115\034\113\035\110\040\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\017\007\250\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= Decs Insts 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog(decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decs ::= LDecs 
            {
              Decs RESULT =null;
		Decs ldecs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = ldecs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.decs_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= LDecs Dec 
            {
              Decs RESULT =null;
		Decs ldecs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(ldecs, dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= Dec 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR ID DOSPUNTOS Tipo PUNTOCOMA 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.decVar(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE ID DOSPUNTOS Tipo PUNTOCOMA 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.decTipo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC ID PAR_AP PForms PAR_CIER Decs Insts PUNTOCOMA 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		PForms pforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.decProc(id, pforms, decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TipoBase ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoInt(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TipoBase ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoReal(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TipoBase ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoString(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoBase ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoBool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoBase",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= TipoBase 
            {
              Tipo RESULT =null;
		Tipo tipobase = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = tipobase; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoRef(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= ARRAY CORCH_AP LITENT CORCH_CIER OF TipoBase 
            {
              Tipo RESULT =null;
		StringLocalizado litent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipobase = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoArray(litent, tipobase); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= RECORD Campos END 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipoRecord(campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= CIRCUN TipoBase 
            {
              Tipo RESULT =null;
		Tipo tipobase = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoPointer(tipobase); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PForms ::= PAR_AP LPFormsPar PAR_CIER 
            {
              PForms RESULT =null;
		PForms lpformspar = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = lpformspar; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PForms",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LPFormsPar ::= LPForms 
            {
              PForms RESULT =null;
		PForms lpforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = lpforms; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPFormsPar",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LPFormsPar ::= 
            {
              PForms RESULT =null;
		 RESULT = sem.pForm_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPFormsPar",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LPForms ::= LPForms COMA PForm 
            {
              PForms RESULT =null;
		PForms lpforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PForm pform = (PForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pForm_muchas(lpforms, pform); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPForms",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LPForms ::= PForm 
            {
              PForms RESULT =null;
		PForm pform = (PForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pForm_una(pform); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPForms",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PForm ::= VAR ID DOSPUNTOS Tipo 
            {
              PForm RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pFormRef(id, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PForm",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PForm ::= ID DOSPUNTOS Tipo 
            {
              PForm RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pForm(id, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PForm",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PReals ::= PAR_AP LPRealsPar PAR_CIER 
            {
              PReals RESULT =null;
		PReals lprealspar = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = lprealspar; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PReals",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LPRealsPar ::= LPReals 
            {
              PReals RESULT =null;
		PReals lpreals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = lpreals; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPRealsPar",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LPRealsPar ::= 
            {
              PReals RESULT =null;
		 RESULT = sem.pReal_ninguno(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPRealsPar",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LPReals ::= LPReals COMA PReal 
            {
              PReals RESULT =null;
		PReals lpreals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PReal preal = (PReal)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pReal_muchos(lpreals, preal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPReals",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LPReals ::= PReal 
            {
              PReals RESULT =null;
		PReal preal = (PReal)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pReal_uno(preal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPReals",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PReal ::= Exp 
            {
              PReal RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pReal(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PReal",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Campos ::= Campos PUNTOCOMA Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_muchos(campos, campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_uno(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Campo ::= ID DOSPUNTOS Tipo 
            {
              Campo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Insts ::= BEGIN LInstsAux END 
            {
              Is RESULT =null;
		Is linstsaux = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = linstsaux; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Insts",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LInstsAux ::= LInsts 
            {
              Is RESULT =null;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = linsts; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInstsAux",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LInstsAux ::= 
            {
              Is RESULT =null;
		 RESULT = sem.is_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInstsAux",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LInsts ::= LInsts Inst 
            {
              Is RESULT =null;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		I inst = (I)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.is_muchas(linsts, inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsts",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LInsts ::= Inst 
            {
              Is RESULT =null;
		I inst = (I)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.is_una(inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsts",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= Exp ASIG Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.asig(exp0, exp1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= IF Exp THEN LInsts END 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.if_then(exp, linsts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inst ::= IF Exp THEN LInsts END PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.if_then(exp, linsts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Inst ::= IF Exp THEN LInsts ELSE LInsts END 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		Is linsts0 = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Is linsts1 = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.if_then_else(exp, linsts0, linsts1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Inst ::= IF Exp THEN LInsts ELSE LInsts END PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		Is linsts0 = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Is linsts1 = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.if_then_else(exp, linsts0, linsts1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Inst ::= WHILE Exp DO LInsts END 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.while1(exp, linsts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Inst ::= WHILE Exp DO LInsts END PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Is linsts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.while1(exp, linsts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Inst ::= READ Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.read(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Inst ::= WRITE Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.write(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Inst ::= NL PUNTOCOMA 
            {
              I RESULT =null;
		 RESULT = sem.nl(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Inst ::= NEW Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.new1(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Inst ::= DELETE Exp PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.delete(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Inst ::= Exp PReals PUNTOCOMA 
            {
              I RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PReals preals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.call(exp, preals); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Inst ::= SEQ Decs Insts PUNTOCOMA 
            {
              I RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.iComp(decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Inst ::= SEQ Decs Insts 
            {
              I RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Is insts = (Is)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.iComp(decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp ::= Exp0 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp0 ::= Exp1 Op0 Exp1 
            {
              Exp RESULT =null;
		Exp exp10 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op0 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp11 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.expb(op0, exp10, exp11); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp0",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp0 ::= Exp1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp1; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp0",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Op0 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Op0 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Op0 ::= MENORIG 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Op0 ::= MAYORIG 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Op0 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Op0 ::= DIST 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp1 ::= Exp2 MAS Exp2 
            {
              Exp RESULT =null;
		Exp exp20 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp21 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.suma(exp20, exp21); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp1 ::= Exp1 MENOS Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.resta(exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp1 ::= Exp2 
            {
              Exp RESULT =null;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp2; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 AND Exp3 
            {
              Exp RESULT =null;
		Exp exp30 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp31 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.and(exp30, exp31); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 OR Exp2 
            {
              Exp RESULT =null;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.or(exp3, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp2 ::= Exp3 
            {
              Exp RESULT =null;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp3; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp3 ::= Exp3 Op3 Exp4 
            {
              Exp RESULT =null;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.expb(op3, exp3,exp4); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp3",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp3 ::= Exp4 
            {
              Exp RESULT =null;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp4; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp3",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op3 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Op3 ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Op3 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= Op4 Exp4 
            {
              Exp RESULT =null;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.expu(op4, exp4); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp4",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= Exp5 
            {
              Exp RESULT =null;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp5; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp4",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Op4 ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op4",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Op4 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op4",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp5 ::= Exp5 Op5 
            {
              Exp RESULT =null;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		MemOp op5 = (MemOp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp_mem(op5.op, op5.exp, op5.valor, exp5); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp5 ::= Exp6 
            {
              Exp RESULT =null;
		Exp exp6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp6; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Op5 ::= CORCH_AP Exp CORCH_CIER 
            {
              MemOp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new MemOp("indx", exp, null); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op5",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Op5 ::= PUNTO ID 
            {
              MemOp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new MemOp("acc", null, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op5",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Op5 ::= CIRCUN PUNTO ID 
            {
              MemOp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new MemOp("dref", null, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op5",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp6 ::= LITENT 
            {
              Exp RESULT =null;
		StringLocalizado litent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litInt(litent); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp6 ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado litreal = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litReal(litreal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp6 ::= LITSTR 
            {
              Exp RESULT =null;
		StringLocalizado litstr = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litStr(litstr); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp6 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.true1(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp6 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.false1(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp6 ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp6 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.null1(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp6 ::= PAR_AP Exp0 PAR_CIER 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = exp0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

